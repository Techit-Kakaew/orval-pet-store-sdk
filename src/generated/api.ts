// @ts-nocheck
/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.7
 */
import type {
  ApiResponse,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  GetInventory200,
  LoginUserParams,
  Order,
  Pet,
  PetBody,
  UpdatePetWithFormBody,
  UploadFileBody,
  User,
  UserArrayBody
} from './models';

import { fetchMutator } from '../runtime/mutator';
/**
 * @summary uploads an image
 */
export type uploadFileResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type uploadFileResponseComposite = uploadFileResponse200;
    
export type uploadFileResponse = uploadFileResponseComposite & {
  headers: Headers;
}

export const getUploadFileUrl = (petId: number,) => {


  

  return `/pet/${petId}/uploadImage`
}

export const uploadFile = async (petId: number,
    uploadFileBody: UploadFileBody, options?: RequestInit): Promise<uploadFileResponse> => {
    const formData = new FormData();
if(uploadFileBody.additionalMetadata !== undefined) {
 formData.append(`additionalMetadata`, uploadFileBody.additionalMetadata)
 }
if(uploadFileBody.file !== undefined) {
 formData.append(`file`, uploadFileBody.file)
 }

  return fetchMutator<uploadFileResponse>(getUploadFileUrl(petId),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}



/**
 * @summary Add a new pet to the store
 */
export type addPetResponse405 = {
  data: null
  status: 405
}
    
export type addPetResponseComposite = addPetResponse405;
    
export type addPetResponse = addPetResponseComposite & {
  headers: Headers;
}

export const getAddPetUrl = () => {


  

  return `/pet`
}

export const addPet = async (petBody: PetBody, options?: RequestInit): Promise<addPetResponse> => {
  
  return fetchMutator<addPetResponse>(getAddPetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      petBody,)
  }
);}



/**
 * @summary Update an existing pet
 */
export type updatePetResponse400 = {
  data: null
  status: 400
}

export type updatePetResponse404 = {
  data: null
  status: 404
}

export type updatePetResponse405 = {
  data: null
  status: 405
}
    
export type updatePetResponseComposite = updatePetResponse400 | updatePetResponse404 | updatePetResponse405;
    
export type updatePetResponse = updatePetResponseComposite & {
  headers: Headers;
}

export const getUpdatePetUrl = () => {


  

  return `/pet`
}

export const updatePet = async (petBody: PetBody, options?: RequestInit): Promise<updatePetResponse> => {
  
  return fetchMutator<updatePetResponse>(getUpdatePetUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      petBody,)
  }
);}



/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export type findPetsByStatusResponse200 = {
  data: Pet[]
  status: 200
}

export type findPetsByStatusResponse400 = {
  data: null
  status: 400
}
    
export type findPetsByStatusResponseComposite = findPetsByStatusResponse200 | findPetsByStatusResponse400;
    
export type findPetsByStatusResponse = findPetsByStatusResponseComposite & {
  headers: Headers;
}

export const getFindPetsByStatusUrl = (params: FindPetsByStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["status"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pet/findByStatus?${stringifiedParams}` : `/pet/findByStatus`
}

export const findPetsByStatus = async (params: FindPetsByStatusParams, options?: RequestInit): Promise<findPetsByStatusResponse> => {
  
  return fetchMutator<findPetsByStatusResponse>(getFindPetsByStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @deprecated
 * @summary Finds Pets by tags
 */
export type findPetsByTagsResponse200 = {
  data: Pet[]
  status: 200
}

export type findPetsByTagsResponse400 = {
  data: null
  status: 400
}
    
export type findPetsByTagsResponseComposite = findPetsByTagsResponse200 | findPetsByTagsResponse400;
    
export type findPetsByTagsResponse = findPetsByTagsResponseComposite & {
  headers: Headers;
}

export const getFindPetsByTagsUrl = (params: FindPetsByTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["tags"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pet/findByTags?${stringifiedParams}` : `/pet/findByTags`
}

export const findPetsByTags = async (params: FindPetsByTagsParams, options?: RequestInit): Promise<findPetsByTagsResponse> => {
  
  return fetchMutator<findPetsByTagsResponse>(getFindPetsByTagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export type getPetByIdResponse200 = {
  data: Pet
  status: 200
}

export type getPetByIdResponse400 = {
  data: null
  status: 400
}

export type getPetByIdResponse404 = {
  data: null
  status: 404
}
    
export type getPetByIdResponseComposite = getPetByIdResponse200 | getPetByIdResponse400 | getPetByIdResponse404;
    
export type getPetByIdResponse = getPetByIdResponseComposite & {
  headers: Headers;
}

export const getGetPetByIdUrl = (petId: number,) => {


  

  return `/pet/${petId}`
}

export const getPetById = async (petId: number, options?: RequestInit): Promise<getPetByIdResponse> => {
  
  return fetchMutator<getPetByIdResponse>(getGetPetByIdUrl(petId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Updates a pet in the store with form data
 */
export type updatePetWithFormResponse405 = {
  data: null
  status: 405
}
    
export type updatePetWithFormResponseComposite = updatePetWithFormResponse405;
    
export type updatePetWithFormResponse = updatePetWithFormResponseComposite & {
  headers: Headers;
}

export const getUpdatePetWithFormUrl = (petId: number,) => {


  

  return `/pet/${petId}`
}

export const updatePetWithForm = async (petId: number,
    updatePetWithFormBody: UpdatePetWithFormBody, options?: RequestInit): Promise<updatePetWithFormResponse> => {
    const formUrlEncoded = new URLSearchParams();
if(updatePetWithFormBody.name !== undefined) {
 formUrlEncoded.append(`name`, updatePetWithFormBody.name)
 }
if(updatePetWithFormBody.status !== undefined) {
 formUrlEncoded.append(`status`, updatePetWithFormBody.status)
 }

  return fetchMutator<updatePetWithFormResponse>(getUpdatePetWithFormUrl(petId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded', ...options?.headers },
    body: 
      formUrlEncoded,
  }
);}



/**
 * @summary Deletes a pet
 */
export type deletePetResponse400 = {
  data: null
  status: 400
}

export type deletePetResponse404 = {
  data: null
  status: 404
}
    
export type deletePetResponseComposite = deletePetResponse400 | deletePetResponse404;
    
export type deletePetResponse = deletePetResponseComposite & {
  headers: Headers;
}

export const getDeletePetUrl = (petId: number,) => {


  

  return `/pet/${petId}`
}

export const deletePet = async (petId: number, options?: RequestInit): Promise<deletePetResponse> => {
  
  return fetchMutator<deletePetResponse>(getDeletePetUrl(petId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export type getInventoryResponse200 = {
  data: GetInventory200
  status: 200
}
    
export type getInventoryResponseComposite = getInventoryResponse200;
    
export type getInventoryResponse = getInventoryResponseComposite & {
  headers: Headers;
}

export const getGetInventoryUrl = () => {


  

  return `/store/inventory`
}

export const getInventory = async ( options?: RequestInit): Promise<getInventoryResponse> => {
  
  return fetchMutator<getInventoryResponse>(getGetInventoryUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Place an order for a pet
 */
export type placeOrderResponse200 = {
  data: Order
  status: 200
}

export type placeOrderResponse400 = {
  data: null
  status: 400
}
    
export type placeOrderResponseComposite = placeOrderResponse200 | placeOrderResponse400;
    
export type placeOrderResponse = placeOrderResponseComposite & {
  headers: Headers;
}

export const getPlaceOrderUrl = () => {


  

  return `/store/order`
}

export const placeOrder = async (order: Order, options?: RequestInit): Promise<placeOrderResponse> => {
  
  return fetchMutator<placeOrderResponse>(getPlaceOrderUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      order,)
  }
);}



/**
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export type getOrderByIdResponse200 = {
  data: Order
  status: 200
}

export type getOrderByIdResponse400 = {
  data: null
  status: 400
}

export type getOrderByIdResponse404 = {
  data: null
  status: 404
}
    
export type getOrderByIdResponseComposite = getOrderByIdResponse200 | getOrderByIdResponse400 | getOrderByIdResponse404;
    
export type getOrderByIdResponse = getOrderByIdResponseComposite & {
  headers: Headers;
}

export const getGetOrderByIdUrl = (orderId: number,) => {


  

  return `/store/order/${orderId}`
}

export const getOrderById = async (orderId: number, options?: RequestInit): Promise<getOrderByIdResponse> => {
  
  return fetchMutator<getOrderByIdResponse>(getGetOrderByIdUrl(orderId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @summary Delete purchase order by ID
 */
export type deleteOrderResponse400 = {
  data: null
  status: 400
}

export type deleteOrderResponse404 = {
  data: null
  status: 404
}
    
export type deleteOrderResponseComposite = deleteOrderResponse400 | deleteOrderResponse404;
    
export type deleteOrderResponse = deleteOrderResponseComposite & {
  headers: Headers;
}

export const getDeleteOrderUrl = (orderId: number,) => {


  

  return `/store/order/${orderId}`
}

export const deleteOrder = async (orderId: number, options?: RequestInit): Promise<deleteOrderResponse> => {
  
  return fetchMutator<deleteOrderResponse>(getDeleteOrderUrl(orderId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * @summary Creates list of users with given input array
 */
export type createUsersWithListInputResponseDefault = {
  data: null
  status: number
}
    
export type createUsersWithListInputResponseComposite = createUsersWithListInputResponseDefault;
    
export type createUsersWithListInputResponse = createUsersWithListInputResponseComposite & {
  headers: Headers;
}

export const getCreateUsersWithListInputUrl = () => {


  

  return `/user/createWithList`
}

export const createUsersWithListInput = async (userArrayBody: UserArrayBody, options?: RequestInit): Promise<createUsersWithListInputResponse> => {
  
  return fetchMutator<createUsersWithListInputResponse>(getCreateUsersWithListInputUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userArrayBody,)
  }
);}



/**
 * @summary Get user by user name
 */
export type getUserByNameResponse200 = {
  data: User
  status: 200
}

export type getUserByNameResponse400 = {
  data: null
  status: 400
}

export type getUserByNameResponse404 = {
  data: null
  status: 404
}
    
export type getUserByNameResponseComposite = getUserByNameResponse200 | getUserByNameResponse400 | getUserByNameResponse404;
    
export type getUserByNameResponse = getUserByNameResponseComposite & {
  headers: Headers;
}

export const getGetUserByNameUrl = (username: string,) => {


  

  return `/user/${username}`
}

export const getUserByName = async (username: string, options?: RequestInit): Promise<getUserByNameResponse> => {
  
  return fetchMutator<getUserByNameResponse>(getGetUserByNameUrl(username),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export type updateUserResponse400 = {
  data: null
  status: 400
}

export type updateUserResponse404 = {
  data: null
  status: 404
}
    
export type updateUserResponseComposite = updateUserResponse400 | updateUserResponse404;
    
export type updateUserResponse = updateUserResponseComposite & {
  headers: Headers;
}

export const getUpdateUserUrl = (username: string,) => {


  

  return `/user/${username}`
}

export const updateUser = async (username: string,
    user: User, options?: RequestInit): Promise<updateUserResponse> => {
  
  return fetchMutator<updateUserResponse>(getUpdateUserUrl(username),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
);}



/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export type deleteUserResponse400 = {
  data: null
  status: 400
}

export type deleteUserResponse404 = {
  data: null
  status: 404
}
    
export type deleteUserResponseComposite = deleteUserResponse400 | deleteUserResponse404;
    
export type deleteUserResponse = deleteUserResponseComposite & {
  headers: Headers;
}

export const getDeleteUserUrl = (username: string,) => {


  

  return `/user/${username}`
}

export const deleteUser = async (username: string, options?: RequestInit): Promise<deleteUserResponse> => {
  
  return fetchMutator<deleteUserResponse>(getDeleteUserUrl(username),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * @summary Logs user into the system
 */
export type loginUserResponse200 = {
  data: string
  status: 200
}

export type loginUserResponse400 = {
  data: null
  status: 400
}
    
export type loginUserResponseComposite = loginUserResponse200 | loginUserResponse400;
    
export type loginUserResponse = loginUserResponseComposite & {
  headers: Headers;
}

export const getLoginUserUrl = (params: LoginUserParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/user/login?${stringifiedParams}` : `/user/login`
}

export const loginUser = async (params: LoginUserParams, options?: RequestInit): Promise<loginUserResponse> => {
  
  return fetchMutator<loginUserResponse>(getLoginUserUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Logs out current logged in user session
 */
export type logoutUserResponseDefault = {
  data: null
  status: number
}
    
export type logoutUserResponseComposite = logoutUserResponseDefault;
    
export type logoutUserResponse = logoutUserResponseComposite & {
  headers: Headers;
}

export const getLogoutUserUrl = () => {


  

  return `/user/logout`
}

export const logoutUser = async ( options?: RequestInit): Promise<logoutUserResponse> => {
  
  return fetchMutator<logoutUserResponse>(getLogoutUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Creates list of users with given input array
 */
export type createUsersWithArrayInputResponseDefault = {
  data: null
  status: number
}
    
export type createUsersWithArrayInputResponseComposite = createUsersWithArrayInputResponseDefault;
    
export type createUsersWithArrayInputResponse = createUsersWithArrayInputResponseComposite & {
  headers: Headers;
}

export const getCreateUsersWithArrayInputUrl = () => {


  

  return `/user/createWithArray`
}

export const createUsersWithArrayInput = async (userArrayBody: UserArrayBody, options?: RequestInit): Promise<createUsersWithArrayInputResponse> => {
  
  return fetchMutator<createUsersWithArrayInputResponse>(getCreateUsersWithArrayInputUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userArrayBody,)
  }
);}



/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export type createUserResponseDefault = {
  data: null
  status: number
}
    
export type createUserResponseComposite = createUserResponseDefault;
    
export type createUserResponse = createUserResponseComposite & {
  headers: Headers;
}

export const getCreateUserUrl = () => {


  

  return `/user`
}

export const createUser = async (user: User, options?: RequestInit): Promise<createUserResponse> => {
  
  return fetchMutator<createUserResponse>(getCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
);}
